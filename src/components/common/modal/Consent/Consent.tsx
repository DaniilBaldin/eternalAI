import React, { FC, useState } from 'react';

import {
    Modal,
    ModalContent,
    ConsentWindow,
    Title,
    MainText,
    CheckboxContainer,
    Input,
    StyledCheckbox,
    Icon,
    Label,
    Span,
    ContinueButton,
    ErrorMessage,
    ErrorMessagePink,
} from './Consent.styles';
import { createPortal } from 'react-dom';
import { useGlobalContext } from '~/services/Context';
import { Selector, appDispatch } from '~/store/hooks/redux-hooks';
import { signUpAction } from '~/store/actions/signUpActions';
import { loadingSelector } from '~/store/selectors/loadingSelector';
import { ButtonLoader } from '../../buttonLoader/ButtonLoader';

type Props = {
    show: boolean;
    onClose: () => void;
    onGoBack: () => void;
    onLogin: () => void;
};

type ErrorMessage = {
    message: string;
    success: string;
};

export const ConsentModal: FC<Props> = (props) => {
    const dispatch = appDispatch();

    const isLoading = Selector(loadingSelector);

    const { show, onClose, onGoBack, onLogin } = props;

    const { user } = useGlobalContext();

    const [isChecked, setIsChecked] = useState<boolean>(false);
    const [error, setError] = useState<string>('');

    const onSubmit = async (event: { preventDefault: () => void }) => {
        event.preventDefault();
        const response = await dispatch(signUpAction(user));
        console.log(response);
        if (response.meta.requestStatus === 'fulfilled') {
            alert('You now may sign in with your email and password.');
            onLogin();
        }
        if (response.meta.requestStatus === 'rejected') {
            if (
                (response.payload as ErrorMessage).message ===
                    'USER_WITH_SUCH_EMAIL_ALREADY_EXISTS' ||
                (response.payload as ErrorMessage).message === 'BAD_REQUEST'
            ) {
                setError('Sorry, user with that email already exists!');
            }
        }
    };

    const onGoBackHandler = () => {
        setError('');
        setIsChecked(false);
        onGoBack();
    };

    return createPortal(
        <div>
            <Modal $show={show} onClick={onClose} />
            <ModalContent $show={show}>
                <ConsentWindow>
                    <Title>About the platform</Title>
                    <MainText>
                        All of the characters here are not real. Everything you see and hear is
                        entirely generated by Artificial Intelligence machines. The opinions and
                        beliefs expressed do not represent anyone. They are hallucinations of a
                        bunch of 1s and 0s inside of a magic computer.
                    </MainText>
                    <MainText>
                        The creators of this platform have the best intentions with this project,
                        and deeply admire each and every character on the site. You might even say
                        they are our Heroes. In fact, you can say that.
                    </MainText>
                    <CheckboxContainer>
                        <Label>
                            <Input
                                checked={isChecked}
                                onChange={(event) => setIsChecked(event.target.checked)}
                            />
                            <StyledCheckbox checked={isChecked}>
                                <Icon
                                    checked={isChecked}
                                    width="18"
                                    height="13"
                                    viewBox="0 0 18 13"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    {' '}
                                    <path
                                        d="M17 1L6 12L1 7"
                                        stroke="white"
                                        strokeWidth="1.5"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                </Icon>
                            </StyledCheckbox>
                            <Span>I have read the above statement</Span>
                        </Label>
                    </CheckboxContainer>
                    {error && (
                        <ErrorMessage>
                            {error}
                            &nbsp;
                            <ErrorMessagePink onClick={onGoBackHandler}>Go back</ErrorMessagePink>
                        </ErrorMessage>
                    )}
                    <ContinueButton disabled={!isChecked || error.length > 0} onClick={onSubmit}>
                        {isLoading ? <ButtonLoader /> : 'CONTINUE'}
                    </ContinueButton>
                </ConsentWindow>
            </ModalContent>
        </div>,
        document.getElementById('root') as HTMLElement,
    );
};
